// js/views/skillView.js
export default class SkillView {
  constructor() {
    this.skillsContainer = document.getElementById("skills-container");
    if (!this.skillsContainer) {
      console.error("[Everlyn] Missing #skills-container in DOM.");
      document.body.insertAdjacentHTML(
        "beforeend",
        `<pre style="color:red;">Missing #skills-container in DOM.</pre>`
      );
    }
  }

  update(state, defs) {
    if (!state || !defs || !this.skillsContainer) return;

    const skills = state.skills ? Object.values(state.skills) : [];
    const unlocked = skills.filter((s) => s.unlocked === true);

    // Generated by Copilot
      this.skillsContainer.innerHTML = `
        <div class="skills-list">
        ${unlocked
          .map((s) => {
          const def = defs.skills?.[s.id] || {};
          const name = def.name || s.id;
          const desc = (def.description || "").replace(/"/g, "&quot;");
          const level = s.level ?? 0;
          const maxLevel = s.maxLevel ?? def.maxLevel ?? "";
          const experience = s.experience ?? 0;
          const nextLevelExperience = s.nextLevelExperience ?? 0;
          const pct =
            nextLevelExperience > 0
            ? Math.min(100, Math.floor((experience / nextLevelExperience) * 100))
            : 0;

          return `
            <div class="skill" title="${desc}">
            <h3 class="skill-name">${name} - Level: ${level}</h3>

            <div class="skill-progress progress-bar" role="progressbar" aria-valuenow="${pct}" aria-valuemin="0" aria-valuemax="100" style="width:${pct}%;">
              <span class="skill-exp">${experience}/${nextLevelExperience}</span>
            </div>

            <button class="skill-study" type="button">Study</button>

            <div class="skill-maxlevel">Max Level: ${maxLevel}</div>
            </div>
          `;
          })
          .join("")}
        </div>
      `;
  }
}